<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/Home.css">
    <title>Document</title>
</head>

<body>
    <div class="main">
        <nav>
            <div class="logo">
                <img src="/Images/logo.png" class="logoImg">
                <h1>CareFlex</h1>
            </div>
            <div class="navElements">
                <a>Home</a>
                <a>Dashboard</a>
                <a href="/login">Login</a>
            </div>
        </nav>

        <div class="chat-widget">
            <div class="chat-header">
                <div class="header-left">
                    <h3>Healthcare Assistant</h3>
                </div>
                <img src="/images/cross_logo.png" alt="" id="cross">
            </div>
    
            <div class="messages-container">
                <div class="message bot">
                    <div class="message-content">
                        Hello! I'm your Healthcare Assistant. How can I help you today?
                    </div>
                </div>
            </div>
    
            <div class="quick-replies">
                <div class="quick-reply-buttons">
                    <button class="quick-reply-btn">Post-surgery pain management</button>
                    <button class="quick-reply-btn">Normal recovery symptoms</button>
                    <button class="quick-reply-btn">When to contact doctor</button>
                    <button class="quick-reply-btn">Medication schedule</button>
                </div>
            </div>
    
            <div class="input-container">
                <div class="input-wrapper">
                    <input type="text" class="chat-input" placeholder="Type your health-related question..." name="message">
                    <button class="send-button" disabled>Send</button>
                </div>
            </div>
        </div>

        <img src="/images/chatbot2.png" alt="" id="forchatbot">

        <div class="display">
            <img src="/Images/dashboardImg_1.png" alt="">
            <div class="displayBtn">
                <button>Get Started</button>
                <button>Learn More</button>
            </div>
        </div>

        <div class="choose">
            <h1>Why Choose CareFlex</h1>
            <p>Choose CareFlex for smart recovery monitoring, early detection, and ultimate comfort—designed to support
                seamless post-C-section healing.</p>
        </div>
        <div class="beltSection">
            <svg class="belt" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1280 92" fill="none">
                <path
                    d="M0 18L260 0L513.5 18H655.5L915.5 35L1134 18L1261.5 35H1326.5V82.5H1261.5L1134 72L915.5 92L655.5 72H513.5L260 57L0 72V18Z"
                    fill="#D9D9D9" />
            </svg>

            <svg class="handle" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 125 179" fill="none">
                <rect width="125" height="179" rx="30" fill="#888888" />
                <rect x="13" y="13" width="100" height="153" rx="30" fill="#D9D9D9" />
            </svg>

            <div class="elements">
                <div class="realTime">
                    <img src="/Images/heart.png">
                    <p>Real-Time Monitoring</p>
                </div>

                <div class="alert">
                    <img src="/Images/alert.png">
                    <p>Smart Alerts</p>
                </div>

                <div class="comfort">
                    <img src="/Images/comfort.png">
                    <p>Comfortable to wear</p>
                </div>
            </div>
        </div>
        <div class="choose-Info">
            <h1>1. Real-Time Monitoring</h1>
            <p>CareFlex provides continuous, real-time tracking of vital metrics like heart rate, blood pressure, and
                stress
                levels, ensuring instant updates to help users make informed health decisions anytime.</p>
            <h1>2. Smart Alerts</h1>
            <p>With intelligent notifications for abnormal readings, CareFlex proactively warns users of potential
                health
                risks, empowering them to take timely action and avoid complications before they escalate.</p>
            <h1>3. Comfortable to Wear</h1>
            <p>Designed with lightweight materials and ergonomic features, CareFlex ensures long-term wearability
                without
                discomfort, seamlessly blending into daily routines for effortless health tracking and convenience.</p>
            <h1>4. Comprehensive Insights</h1>
            <p>CareFlex combines data from multiple metrics to offer personalized insights into recovery, stress, and
                overall wellness, providing a holistic view of health for effective management.</p>
        </div>
        <div class="Instruction-Container">
            <h1 class="how-to-use">How to use?</h1>
            <div class="title-img">
                <div class="steps">
                    <div class="step1">
                        <p class="step-number">1</p>
                        <div class="step-card">
                            <h1 class="card-title">Wear belt Before Surgery</h1>
                            <p>Records the impedance and conductance Value</p>
                        </div>
                    </div>

                    <div class="step1">
                        <p class="step-number">2</p>
                        <div class="step-card">
                            <h1 class="card-title">Attach Sensor near wound area</h1>
                            <p>Keep the electrode for real-time Monitoring</p>
                        </div>
                    </div>

                    <div class="step1">
                        <p class="step-number">3</p>
                        <div class="step-card">
                            <h1 class="card-title">personalised Threshold</h1>
                            <p>Check the Threshold for Post-Surgery on Website</p>
                        </div>
                    </div>

                    <div class="step1">
                        <p class="step-number">4</p>
                        <div class="step-card">
                            <h1 class="card-title">Post- Surgery</h1>
                            <p>Remove belt and wear it after Surgery</p>
                        </div>
                    </div>

                    <div class="step1">
                        <p class="step-number">5</p>
                        <div class="step-card">
                            <h1 class="card-title">Continuous Monitoring</h1>
                            <p>Receive updates and alerts on wound healing.</p>
                        </div>
                    </div>
                </div>
                <img class="dashboard_2" src="/Images/dashboard_2.png" alt="">
            </div>
        </div>
        <div class="card-section">
            <img src="/Images/dashboard_3.jpeg" class="dashboard_3">
            <div class="card">
                <h1>Moms love CareFlex!</h1>
                <p>“Start Your Journey to a Faster Recovery Today!"</p>
            </div>
        </div>

        <div class="Explore">
            <h1>Explore Recovery Tips & Insights</h1>
            <div class="Explore-list">
                <ul>
                    <li>"Top Foods for Faster Postpartum Healing"</li>
                    <li>"When to Seek Help: Spotting Signs of Infection After C-Section"</li>
                    <li>"The Role of Rest in Recovery: Finding Balance as a New Mom"</li>
                    <li>"How CareFlex Monitors Your Recovery in Real-Time"</li>
                    <li>"Exercises to Regain Core Strength Safely Post-C-Section"</li>
                    <li>"Managing Emotional Wellbeing During Postpartum Recovery"</li>
                    <li>"What to Pack for a Comfortable C-Section Recovery"</li>
                    <li>"Understanding Scar Care: Tips for Minimizing Scarring"</li>
                </ul>
                <img src="/Images/dashboard_4.jpeg" alt="">
            </div>
        </div>

    </div>
<footer>
    <p>About</p>
    <p>|</p>
    <p>About</p>
    <p>|</p>
    <p>Privacy Policy</p>
    <p>|</p>
    <p>Terms and Services</p>
    <p>|</p>
    <p>Contact Us</p>
   
</footer>

<script>

chtbtn = document.querySelector("#forchatbot");
chatbot = document.querySelector(".chat-widget");
cross = document.querySelector("#cross");

chtbtn.addEventListener("click" ,() =>{
      chtbtn.style.display = "none";
      chatbot.style.display = "flex";
})

cross.addEventListener("click" ,() =>{
      chtbtn.style.display = "flex";
      chatbot.style.display = "none";
})

function addMessage(text, isBot) {
    const messagesContainer = document.querySelector('.messages-container');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isBot ? 'bot' : 'user'}`;
    
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    messageContent.textContent = text;
    
    messageDiv.appendChild(messageContent);
    messagesContainer.appendChild(messageDiv);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Function to add typing indicator
function addTypingIndicator() {
    const messagesContainer = document.querySelector('.messages-container');
    const typingDiv = document.createElement('div');
    typingDiv.className = 'typing-indicator';
    
    for (let i = 0; i < 3; i++) {
        const dot = document.createElement('div');
        dot.className = 'typing-dot';
        typingDiv.appendChild(dot);
    }
    
    messagesContainer.appendChild(typingDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    return typingDiv;
}

// Function to remove typing indicator
function removeTypingIndicator(typingIndicator) {
    if (typingIndicator && typingIndicator.parentNode) {
        typingIndicator.parentNode.removeChild(typingIndicator);
    }
}

// Handle send message
async function handleSend() {
    const input = document.querySelector('.chat-input');
    const sendButton = document.querySelector('.send-button');
    const text = input.value.trim();
    
    if (!text) return;
    
    // Add user message to chat
    addMessage(text, false);
    input.value = '';
    sendButton.disabled = true;
    
    // Show typing indicator
    const typingIndicator = addTypingIndicator();
    
    try {
        const response = await fetch('http://localhost:5500/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message: text })
            
            
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log("Received response:", data); // Debug log
        
        // Remove typing indicator
        removeTypingIndicator(typingIndicator);
        

        

        // Check the structure of your API response
        const botResponse = data.reply || data.message || data.response || data;
        
        if (typeof botResponse === 'string') {
            addMessage(botResponse, true);
        } else if (typeof botResponse === 'object') {
            addMessage(JSON.stringify(botResponse), true);
        } else {
            addMessage("Received response in unexpected format", true);
        }
        
    } catch (error) {
        console.error("Error details:", error); // Debug log
        removeTypingIndicator(typingIndicator);
        addMessage("I apologize, but I'm having trouble at the moment. Please try again later.", true);
    }
    
    sendButton.disabled = false;
}

// Initialize the chat interface
document.addEventListener('DOMContentLoaded', () => {
    const input = document.querySelector('.chat-input');
    const sendButton = document.querySelector('.send-button');
    
    // Enable/disable send button based on input
    input.addEventListener('input', () => {
        sendButton.disabled = !input.value.trim();
    });
    
    // Handle enter key
    input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !sendButton.disabled) {
            handleSend();
        }
    });
    
    // Handle send button click
    sendButton.addEventListener('click', handleSend);
    
    // Handle quick reply buttons
    document.querySelectorAll('.quick-reply-btn').forEach(button => {
        button.addEventListener('click', () => {
            input.value = button.textContent;
            sendButton.disabled = false;
            handleSend();
        });
    });
});
</script>
</body>

</html>